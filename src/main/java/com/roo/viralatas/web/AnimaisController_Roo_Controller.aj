// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.roo.viralatas.web;

import com.roo.viralatas.domain.Animais;
import com.roo.viralatas.domain.Feiras;
import com.roo.viralatas.domain.HistoricoFeiraAnimais;
import com.roo.viralatas.domain.Prontuarios;
import com.roo.viralatas.domain.SolicitacaoAdocoes;
import com.roo.viralatas.web.AnimaisController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AnimaisController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AnimaisController.create(@Valid Animais animais, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, animais);
            return "animaises/create";
        }
        uiModel.asMap().clear();
        animais.persist();
        return "redirect:/animaises/" + encodeUrlPathSegment(animais.getIdAnimal().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AnimaisController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Animais());
        return "animaises/create";
    }
    
    @RequestMapping(value = "/{idAnimal}", produces = "text/html")
    public String AnimaisController.show(@PathVariable("idAnimal") Integer idAnimal, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("animais", Animais.findAnimais(idAnimal));
        uiModel.addAttribute("itemId", idAnimal);
        return "animaises/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AnimaisController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("animaises", Animais.findAnimaisEntries(firstResult, sizeNo));
            float nrOfPages = (float) Animais.countAnimaises() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("animaises", Animais.findAllAnimaises());
        }
        addDateTimeFormatPatterns(uiModel);
        return "animaises/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AnimaisController.update(@Valid Animais animais, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, animais);
            return "animaises/update";
        }
        uiModel.asMap().clear();
        animais.merge();
        return "redirect:/animaises/" + encodeUrlPathSegment(animais.getIdAnimal().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idAnimal}", params = "form", produces = "text/html")
    public String AnimaisController.updateForm(@PathVariable("idAnimal") Integer idAnimal, Model uiModel) {
        populateEditForm(uiModel, Animais.findAnimais(idAnimal));
        return "animaises/update";
    }
    
    @RequestMapping(value = "/{idAnimal}", method = RequestMethod.DELETE, produces = "text/html")
    public String AnimaisController.delete(@PathVariable("idAnimal") Integer idAnimal, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Animais animais = Animais.findAnimais(idAnimal);
        animais.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/animaises";
    }
    
    void AnimaisController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("animais_datanascimento_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("animais_datacadastro_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void AnimaisController.populateEditForm(Model uiModel, Animais animais) {
        uiModel.addAttribute("animais", animais);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("feirases", Feiras.findAllFeirases());
        uiModel.addAttribute("historicofeiraanimaises", HistoricoFeiraAnimais.findAllHistoricoFeiraAnimaises());
        uiModel.addAttribute("prontuarioses", Prontuarios.findAllProntuarioses());
        uiModel.addAttribute("solicitacaoadocoeses", SolicitacaoAdocoes.findAllSolicitacaoAdocoeses());
    }
    
    String AnimaisController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
